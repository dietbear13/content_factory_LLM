import json
import os
import logging

from langchain.chat_models import ChatOpenAI
from langchain.prompts import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate
)
from langchain.chains import LLMChain


class StyleEditor:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π, –≥–ª–∞–¥–∫–∏–π, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å
    –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Å–º—ã—Å–ª–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.
    """

    def __init__(self, config_path=None):
        script_dir = os.path.dirname(os.path.realpath(__file__))
        if config_path is None:
            config_path = os.path.join(script_dir, "configs", "style_config.json")

        with open(config_path, "r", encoding="utf-8") as f:
            self.config = json.load(f)

        self.model_name = self.config.get("model_name", "gpt-4")
        self.temperature = self.config.get("temperature", 0.3)
        self.top_p = self.config.get("top_p", 1.0)
        self.presence_penalty = self.config.get("presence_penalty", 0.0)
        self.frequency_penalty = self.config.get("frequency_penalty", 0.0)

        self.tone = self.config.get("tone", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π")
        self.preferred_person = self.config.get("preferred_person", "—Ç—Ä–µ—Ç—å–µ –ª–∏—Ü–æ")
        self.avoid_jargon = self.config.get("avoid_jargon", True)
        self.use_simplification = self.config.get("use_simplification", True)
        self.additional_rules = self.config.get("additional_rules", [])

        self.llm = ChatOpenAI(
            model_name=self.model_name,
            temperature=self.temperature,
            top_p=self.top_p,
            presence_penalty=self.presence_penalty,
            frequency_penalty=self.frequency_penalty
        )

        self.system_message_template = """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä.

üß† –¶–µ–ª—å:
–£–ª—É—á—à–∏—Ç—å —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞: —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø–ª–∞–≤–Ω—ã–º, –ª–æ–≥–∏—á–Ω—ã–º, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è.

üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –°–æ–±–ª—é–¥–∞–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tone}
- –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ª–∏—Ü–æ: {preferred_person}
- –£–ø—Ä–æ—â–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã: {use_simplification}
- –ò–∑–±–µ–≥–∞—Ç—å –∂–∞—Ä–≥–æ–Ω–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {avoid_jargon}
- –ù–µ –∏–∑–º–µ–Ω—è–π —Å–º—ã—Å–ª.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è.
- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, —Å–Ω–æ—Å–æ–∫ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è:
{additional_rules}
"""

        self.human_message_template = """
–í–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏:

"{original_text}"
"""

        self.chat_prompt = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(self.system_message_template),
            HumanMessagePromptTemplate.from_template(self.human_message_template)
        ])

    def run(self, text: str) -> str:
        logging.info("[StyleEditor] –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞.")

        additional_rules = "\n".join(self.additional_rules) if self.additional_rules else "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π."

        chain_input = {
            "tone": self.tone,
            "preferred_person": self.preferred_person,
            "use_simplification": str(self.use_simplification).lower(),
            "avoid_jargon": str(self.avoid_jargon).lower(),
            "additional_rules": additional_rules,
            "original_text": text
        }

        chain = LLMChain(llm=self.llm, prompt=self.chat_prompt)
        return chain.run(chain_input)
